#!/bin/bash

# TODO: Handle automatic positive/negative detection
# TODO: Resize to fit in actual folder region
# TODO: use variable in folderify

SCRIPT_DIR="`dirname $0`"
SCRIPT_NAME="`basename $0`"

FOLDER_ICONS_FOLDER="`dirname $0`/scaled_folders"
FILE="$1"

ASSIGN_TO_EXISTING_FILE=0
OUT_FILE_NEW="${FILE%.*}_folder.icns"
OUT_FILE_EXISTING=""

HR_DIVIDE="----------------"

function show_help {
cat <<HEREDOC

Usage: $SCRIPT_NAME <file.png> [<optional_target_file.png>]

- The file should be an image with a transparent background (i.e. the corners should be transparent).
- $SCRIPT_NAME will produce a .icns file with 5 resolutions of icons generated from the input file.
- If a target file is specified, the icon is assigned to that file instead.

HEREDOC
}



function echocol {
 echo -e "\033[1;$1m$2\033[0m"
}


if [ $# -ne 1 ]
then
	ASSIGN_TO_EXISTING_FILE=1
	OUT_FILE_EXISTING="$2"
fi


if [ ! -f "${FILE}" ]
then
	echo ""
	echocol 31 "ERROR - Not a file: ${FILE}"
	show_help
	exit 1
fi



function folderify {

	FILE="$1"
	TEMP_FILE_OUT="$2"
	TEMP_FILE="`mktemp /tmp/folderify_img.XXXXXX`"
	scale="$3"
	main_opacity="$4"
	offset_white="$5"
	opacity_white="$6"
	offset_black="$7"
	width="$8"
	height="$9"
	offset_center="${10}"

	convert "${FILE}" -trim -resize "${width}x${height}>" -bordercolor none -border 10 "${TEMP_FILE}"

	convert "$FOLDER_ICONS_FOLDER/folder_$scale.png" \( \( "${TEMP_FILE}" -negate -colorize 3,23,40 -negate \) \
	\( \
		\( \
			\( \
				"${TEMP_FILE}" \
				\( \
					"${TEMP_FILE}" -negate -shadow 100x1+10+0 -geometry -2-2 \
				\) \
				-compose dst-out -composite +repage \
			\) \
			\( \
				"${TEMP_FILE}" \
				\( \
					"${TEMP_FILE}" -negate -geometry +0-1 \
				\) \
				-compose dst-out -composite +repage -negate -geometry +0+${offset_white} \
			\) \
			-compose dissolve -define compose:args=${opacity_white}x50 -composite +repage \
		\) \
		\( \
			"${TEMP_FILE}" \
			\( \
				"${TEMP_FILE}" -negate -geometry +0+1 \
			\) \
			-compose dst-out -composite +repage \
		\) \
		-compose dissolve -define compose:args=50x80 -composite \
	\) \
	-compose dissolve -define compose:args=60x$main_opacity -composite +repage \
	-gravity Center -geometry +0+${offset_center} \
	+repage \
	\) \
	-compose over -composite  "${TEMP_FILE_OUT}"

	rm "${TEMP_FILE}"
 }

echo ""
echo "Making icon file for ${FILE}"

echo "${HR_DIVIDE}"

# TODO: Make parameter passing a bit more readable.

echo "Generating 16x16 image..."
TEMP_FILE_16="`mktemp /tmp/folderify_16.XXXXXX`"
folderify "$FILE" "${TEMP_FILE_16}" 16 50   1 50   1    12 8 1

echo "Generating 32x32 image..."
TEMP_FILE_32="`mktemp /tmp/folderify_32.XXXXXX`"
folderify "$FILE" "${TEMP_FILE_32}" 32 32   1 75   1    26 14 2

echo "Generating 128x128 image..."
TEMP_FILE_128="`mktemp /tmp/folderify_128.XXXXXX`"
folderify "$FILE" "${TEMP_FILE_128}" 128 24   2 100   1    103 60 9

echo "Generating 56x256 image..."
TEMP_FILE_256="`mktemp /tmp/folderify_256.XXXXXX`"
folderify "$FILE" "${TEMP_FILE_256}" 256 20   2 100   1    206 121 18

echo "Generating 512x512 image..."
TEMP_FILE_512="`mktemp /tmp/folderify_512.XXXXXX`"
folderify "$FILE" "${TEMP_FILE_512}" 512 12   2 100   1    412 242 36


# Make the .icns file.

echo "${HR_DIVIDE}"
echo "Making the .icns file..."

TEMP_ICNS_FILE="`mktemp /tmp/folderify_icns.XXXXXX`"

"${SCRIPT_DIR}/lib/makeicns" \
-16 "${TEMP_FILE_16}" \
-32 "${TEMP_FILE_32}" \
-128 "${TEMP_FILE_128}" \
-256 "${TEMP_FILE_256}" \
-512 "${TEMP_FILE_512}" \
-out "${TEMP_ICNS_FILE}"

rm "${TEMP_FILE_16}" "${TEMP_FILE_32}" "${TEMP_FILE_128}" "${TEMP_FILE_256}" "${TEMP_FILE_512}"



# Make the rsrc file.

echo "${HR_DIVIDE}"
echo "Making the rsrc file..."

TEMP_RSRC_FILE="`mktemp /tmp/folderify_rsrc.XXXXXX`"

python "${SCRIPT_DIR}/lib/lgicns2rsrc.py" "${TEMP_ICNS_FILE}" "${TEMP_RSRC_FILE}"


#Assign the rsrc file.

# Adapted from painful amounts of searchin on the internet, and some good approaches from http://hasseg.org/stuff/assignIconScript/assignIcon
function assign_icon {

	echo "${HR_DIVIDE}"

	if [ "`file -b \"$2\"`" == "directory" ]
	then
		echo "Assigning icon directory: ${2}"
		/Developer/Tools/Rez -append "${1}" -o `printf "${2}/Icon\r"`
		SetFile -a C "${2}"
		SetFile -a V `printf "${2}/Icon\r"`
	else 
		echo "Assigning icon to file: ${2}"
		/Developer/Tools/Rez -append "${1}" -o "${2}"
		SetFile -a C "${2}"
	fi

	CUR_DIR=`pwd`
	TARGETSPATH=`dirname $2`
	TARGETSFULLPATH="`cd $TARGETSPATH; pwd`/$2"

	# echo "Going to try to tell Finder about the change so that it shows the new icon immediately."
	# echo "(This may throw a harmless AppleEvent handler failure on the next line.)"

	# Instead of printing a warning, let's just tr to suppress all output.
	echo `osascript -e "tell application \"Finder\" to update POSIX file \"$TARGETSFULLPATH\""  2>&1 > /dev/null` 2>&1 > /dev/null
	# echo "Done telling Finder."

	cd "${CUR_DIR}"

}

OUT_FILE_ASSIGN=""
if [ "${ASSIGN_TO_EXISTING_FILE}" -eq 1 ]
then
	assign_icon "${TEMP_RSRC_FILE}" "${OUT_FILE_EXISTING}"
	rm "${TEMP_ICNS_FILE}"
else
	mv "${TEMP_ICNS_FILE}" "${OUT_FILE_NEW}"
	assign_icon "${TEMP_RSRC_FILE}" "${OUT_FILE_NEW}"
fi

rm "${TEMP_RSRC_FILE}"

echo "${HR_DIVIDE}"

echo "Done."
echo ""