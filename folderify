#!/bin/bash

# TODO: Handle automatic positive/negative detection
# TODO: Resize to fit in actual folder region
# TODO: use variable in folderify

SCRIPT_DIR="`dirname $0`"
SCRIPT_NAME="`basename $0`"

FOLDER_ICONS_FOLDER="`dirname $0`/GenericFolderIcon.iconset"
FILE="$1"

SET_ICON_PROGRAM="${SCRIPT_DIR}/lib/seticon"

if [ $# -ne 1 ]
then
  ASSIGN_TO_EXISTING_FILE=1
  TARGET_FOLDER="$2"
else
	ASSIGN_TO_EXISTING_FILE=0
fi

TEMP_FOLDER=$(mktemp -d "/tmp/folderify.XXXXXX")

if [ "${ASSIGN_TO_EXISTING_FILE}" -eq 1 ]
then
	ICONSET_FOLDER="${TEMP_FOLDER}/iconset.iconset"
	ICNS_FILE="${TEMP_FOLDER}/icns.icns"
else
	# TODO: Make these into options.
	ICONSET_FOLDER="${FILE%.*}.iconset"
	ICNS_FILE="${FILE%.*}.icns"
fi



HR_DIVIDE="----------------"

function show_help {
cat <<HEREDOC

Usage: $SCRIPT_NAME <file.png> [<optional_target_file.png>]

- The file should be an image with a transparent background (i.e. the corners should be transparent).
- $SCRIPT_NAME will produce a .icns file with 5 resolutions of icons generated from the input file.
- If a target file is specified, the icon is assigned to that file instead.

HEREDOC
}

function echocol {
 echo -e "\033[1;$1m$2\033[0m"
}


if [ ! -f "${FILE}" ]
then
	echo ""
	echocol 31 "ERROR - Not a file: ${FILE}"
	show_help
	exit 1
fi



function folderify {

	FILE="$1"
	TEMP_FILE_OUT="$2"
	TEMP_FILE="`mktemp /tmp/folderify_img.XXXXXX`"
	scale="$3"
	main_opacity="$4"
	offset_white="$5"
	opacity_white="$6"
	offset_black="$7"
	width="$8"
	height="$9"
	offset_center="${10}"
	NAME="${11}"

	convert "${FILE}" -trim -resize "${width}x${height}" -bordercolor none -border 10 "${TEMP_FILE}"

	convert "$FOLDER_ICONS_FOLDER/icon_${NAME}.png" \( \( "${TEMP_FILE}" -negate -colorize 3,23,40 -negate \) \
	\( \
		\( \
			\( \
				"${TEMP_FILE}" \
				\( \
					"${TEMP_FILE}" -negate -shadow 100x1+10+0 -geometry -2-2 \
				\) \
				-compose dst-out -composite +repage \
			\) \
			\( \
				"${TEMP_FILE}" \
				\( \
					"${TEMP_FILE}" -negate -geometry +0-1 \
				\) \
				-compose dst-out -composite +repage -negate -geometry +0+${offset_white} \
			\) \
			-compose dissolve -define compose:args=${opacity_white}x50 -composite +repage \
		\) \
		\( \
			"${TEMP_FILE}" \
			\( \
				"${TEMP_FILE}" -negate -geometry +0+1 \
			\) \
			-compose dst-out -composite +repage \
		\) \
		-compose dissolve -define compose:args=50x80 -composite \
	\) \
	-compose dissolve -define compose:args=60x$main_opacity -composite +repage \
	-gravity Center -geometry +0+${offset_center} \
	+repage \
	\) \
	-compose over -composite  "${TEMP_FILE_OUT}"

	rm "${TEMP_FILE}"
 }

echo ""
echo "Making icon file for ${FILE}"

echo "${HR_DIVIDE}"

mkdir -p "${ICONSET_FOLDER}"

echo "Generating 16x16 image..."
TEMP_FILE_16="${ICONSET_FOLDER}/icon_16x16.png"
folderify "$FILE" "${TEMP_FILE_16}" 16 15   1 50   1    12 8 1 "16x16" &

echo "Generating 32x32 image..."
TEMP_FILE_32="${ICONSET_FOLDER}/icon_32x32.png"
folderify "$FILE" "${TEMP_FILE_32}" 32 15   1 75   1    26 14 2 "32x32" &

echo "Generating 128x128 image..."
TEMP_FILE_128="${ICONSET_FOLDER}/icon_128x128.png"
folderify "$FILE" "${TEMP_FILE_128}" 128 15   1 100   1    103 53 4 "128x128" &

echo "Generating 256x256 image..."
TEMP_FILE_256="${ICONSET_FOLDER}/icon_256x256.png"
folderify "$FILE" "${TEMP_FILE_256}" 256 15   1 100   1    206 106 9 "256x256" &

echo "Generating 512x512 image..."
TEMP_FILE_512="${ICONSET_FOLDER}/icon_512x512.png"
folderify "$FILE" "${TEMP_FILE_512}" 512 15   1 100   1    412 212 18 "512x512" &

echo "Generating 512x512@2x image..."
TEMP_FILE_512_2X="${ICONSET_FOLDER}/icon_512x512@2x.png"
folderify "$FILE" "${TEMP_FILE_512_2X}" 1024 15   1 100   1    824 424 36 "512x512@2x" &

wait

# Make the .icns file.

echo "${HR_DIVIDE}"
echo "Making the .icns file..."

iconutil \
	--convert icns \
	--output "${ICNS_FILE}" \
	"${ICONSET_FOLDER}"

if [ "${ASSIGN_TO_EXISTING_FILE}" -eq 1 ]
then
	${SET_ICON_PROGRAM} -d "${ICNS_FILE}" "${TARGET_FOLDER}"
else
	${SET_ICON_PROGRAM} -d "${ICNS_FILE}" "${ICNS_FILE}"
fi

# rm -rf "${TEMP_FOLDER}"

echo "${HR_DIVIDE}"

echo "Done."
echo ""